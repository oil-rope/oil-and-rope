# Generated by Django 3.1.1 on 2020-09-29 10:10

import common.files.upload
import common.validators.files
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('chat', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_created_at', models.DateTimeField(auto_now_add=True, verbose_name='Entry created at')),
                ('entry_updated_at', models.DateTimeField(auto_now=True, verbose_name='Entry updated at')),
                ('name', models.CharField(max_length=25, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('domain_type', models.PositiveSmallIntegerField(choices=[(0, 'Domain'), (1, 'Subdomain')], default=0, verbose_name='Domain type')),
                ('image', models.ImageField(blank=True, null=True, upload_to=common.files.upload.default_upload_to, verbose_name='Image')),
            ],
            options={
                'verbose_name': 'Domain',
                'verbose_name_plural': 'Domains',
                'ordering': ['name', '-entry_created_at', '-entry_updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_created_at', models.DateTimeField(auto_now_add=True, verbose_name='Entry created at')),
                ('entry_updated_at', models.DateTimeField(auto_now=True, verbose_name='Entry updated at')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('site_type', models.PositiveSmallIntegerField(choices=[(0, 'House'), (1, 'Town'), (2, 'Village'), (3, 'City'), (4, 'Metropolis'), (5, 'Forest'), (6, 'Hills'), (7, 'Mountains'), (8, 'Mines'), (9, 'River'), (10, 'Sea'), (11, 'Desert'), (12, 'Tundra'), (13, 'Unusual'), (14, 'Island'), (15, 'Country'), (16, 'Continent'), (17, 'World')], default=1, verbose_name='Site type')),
                ('image', models.ImageField(blank=True, null=True, upload_to=common.files.upload.default_upload_to, validators=[common.validators.files.validate_file_size], verbose_name='Image')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='places_owned', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
                ('parent_site', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children_sites', to='roleplay.place', verbose_name='Parent site')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='places', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Place',
                'verbose_name_plural': 'Places',
                'ordering': ['name', '-entry_created_at', '-entry_updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Race',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_created_at', models.DateTimeField(auto_now_add=True, verbose_name='Entry created at')),
                ('entry_updated_at', models.DateTimeField(auto_now=True, verbose_name='Entry updated at')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('strength', models.SmallIntegerField(default=0, verbose_name='Strength')),
                ('dexterity', models.SmallIntegerField(default=0, verbose_name='Dexterity')),
                ('constitution', models.SmallIntegerField(default=0, verbose_name='Constitution')),
                ('intelligence', models.SmallIntegerField(default=0, verbose_name='Intelligence')),
                ('wisdom', models.SmallIntegerField(default=0, verbose_name='Wisdom')),
                ('charisma', models.SmallIntegerField(default=0, verbose_name='Charisma')),
                ('affected_by_armor', models.BooleanField(default=True, help_text='Declares if this race is affected by armor penalties', verbose_name='Affected by armor')),
                ('image', models.ImageField(blank=True, null=True, upload_to=common.files.upload.default_upload_to, validators=[common.validators.files.validate_file_size], verbose_name='Image')),
            ],
            options={
                'verbose_name': 'Race',
                'verbose_name_plural': 'Races',
                'ordering': ['-entry_created_at', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_created_at', models.DateTimeField(auto_now_add=True, verbose_name='Entry created at')),
                ('entry_updated_at', models.DateTimeField(auto_now=True, verbose_name='Entry updated at')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('next_game', models.DateTimeField(blank=True, null=True, verbose_name='Next session')),
                ('system', models.PositiveSmallIntegerField(choices=[(0, 'Pathfinder')], verbose_name='System')),
                ('chat', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='session_set', related_query_name='session', to='chat.chat', verbose_name='Chat')),
                ('game_master', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gm_session_set', related_query_name='gm_session', to=settings.AUTH_USER_MODEL, verbose_name='GameMaster')),
                ('players', models.ManyToManyField(related_name='session_set', related_query_name='session', to=settings.AUTH_USER_MODEL, verbose_name='Players')),
                ('world', models.ForeignKey(limit_choices_to={'site_type': 17}, on_delete=django.db.models.deletion.CASCADE, related_name='session_set', related_query_name='session', to='roleplay.place', verbose_name='World')),
            ],
            options={
                'verbose_name': 'Session',
                'verbose_name_plural': 'Sessions',
                'ordering': ['-entry_created_at', 'name'],
            },
        ),
        migrations.CreateModel(
            name='RaceUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_created_at', models.DateTimeField(auto_now_add=True, verbose_name='Entry created at')),
                ('entry_updated_at', models.DateTimeField(auto_now=True, verbose_name='Entry updated at')),
                ('is_owner', models.BooleanField(default=False, verbose_name='Ownership')),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='m2m_race_set', to='roleplay.race', verbose_name='Race')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='m2m_race_set', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'ordering': ['-entry_created_at', 'entry_updated_at'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='race',
            name='users',
            field=models.ManyToManyField(db_index=True, related_name='race_set', through='roleplay.RaceUser', to=settings.AUTH_USER_MODEL, verbose_name='Users'),
        ),
    ]
